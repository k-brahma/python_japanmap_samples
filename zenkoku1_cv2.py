"""OpenCVを活用した境界線制御による日本地図生成プログラム

このプログラムは、japanmapライブラリで生成した日本地図の境界線をOpenCVを使って
精密に制御します。従来のmatplotlibによる描画に比べて、より細かい境界線の
調整が可能になり、プロフェッショナルな印象の地図を生成できます。

プログラムの動作原理：
画像処理の観点から見ると、このプログラムは以下の重要な段階を経て地図を生成します。
まず、japanmapライブラリを使用して基本となる地図画像を生成します。次に、この画像を
OpenCVの画像処理パイプラインに通すことで、境界線の視覚的な特性を細かく制御します。
最後に、処理された画像をmatplotlibを使用して表示します。

画像処理の詳細な流れ：

1. 基本地図の生成:
  japanmapライブラリを使用して、白地図ベースの画像を生成します。この段階では、
  すべての都道府県が白色で塗りつぶされ、基本的な境界線情報が含まれています。

2. 色空間の変換:
  OpenCVはBGR形式を使用するため、生成された画像をRGB形式に変換する必要が
  あります。この変換により、以降の色処理が正確に行われることを保証します。

3. 境界線の強調処理:
  - オーバーレイ画像の生成：境界線用の単色画像を作成
  - アルファブレンディング：境界線の透明度を0.3に設定し、元の画像と重ね合わせ
  この処理により、境界線が目立ちすぎず、かつ十分に視認できる絶妙なバランスを
  実現しています。

技術的な実装詳細：
- 使用する色：RGB(204, 204, 204)の薄いグレー
- アルファ値：0.3（30%の不透明度）
- 画像サイズ：10x10インチ（高解像度での表示に適しています）

必要なライブラリ：
- japanmap: 基本的な日本地図データの提供
- matplotlib: 最終的な地図の表示
- cv2 (OpenCV): 画像処理と境界線の制御
- numpy: 画像データの数値処理

出力：
精密に制御された境界線を持つ日本地図が生成され、matplotlibウィンドウに
表示されます。境界線は薄いグレーで、適度な透明度を持ち、視認性と
美的なバランスを両立しています。

この実装の利点：
1. 境界線の視覚的特性を細かく制御可能
2. OpenCVの画像処理能力を活用した高品質な出力
3. カスタマイズ性の高さ（色やアルファ値の調整が容易）

カスタマイズのポイント：
- line_color: 境界線の色をRGBで指定可能
- alpha: 境界線の透明度を0.0から1.0の間で調整可能
- figsize: 出力画像のサイズを変更可能

注意事項：
- OpenCVとmatplotlibの色空間の違い（BGRとRGB）に注意が必要です
- メモリ使用量が大きくなる可能性があるため、大きなサイズの出力時は
 リソースの確認が推奨されます
"""
import japanmap as jm
import matplotlib.pyplot as plt
import cv2
import numpy as np

# 日本地図を描画
plt.figure(figsize=(10, 10))

# 都道府県コードのリストを取得
pref_code = jm.pref_names  # これはリスト形式として返される

# 都道府県の色分けデータを作成（全て同じ色に設定）
cmap = {i + 1: 'white' for i in range(len(pref_code))}  # 1 から 47 のコードに対応

# 地図画像を生成
image = jm.picture(cmap)

# OpenCV を使用して境界線を薄い色で描画
# 例: 薄い灰色 (#CCCCCC) に変換
line_color = (204, 204, 204)  # RGB の薄いグレー
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # OpenCV 形式を Matplotlib 用に変換

# OpenCV で境界線の重ね合わせ（例: 境界線を描画）
overlay = np.full_like(image, line_color, dtype=np.uint8)
alpha = 0.3  # 境界線の透明度
cv2.addWeighted(overlay, alpha, image, 1 - alpha, 0, image)

# Matplotlib で地図を表示
plt.imshow(image)

# 軸を非表示に
plt.axis('off')

# 余白を調整
plt.tight_layout()

plt.show()
