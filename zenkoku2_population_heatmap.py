"""日本の都道府県別人口密度を可視化するプログラム（架空データ使用）

このプログラムは、架空の人口密度データを使用して日本の都道府県別人口密度を視覚的に表現します。
人口密度の違いを青の濃淡で表現することで、データの地理的な分布パターンを直感的に理解
できるようにしています。

プログラムの動作原理：
人口密度の視覚化は、以下の重要な段階を経て実現されています。

1. データ生成フェーズ：
  乱数を使用して各都道府県の人口密度データを生成します。ここでは random.seed(42) を
  使用することで、プログラムを実行するたびに同じデータが生成されることを保証しています。
  人口密度は50人/km²から1000人/km²の範囲で設定され、現実の日本の人口密度分布の
  スケール感を模しています。

2. 色変換フェーズ：
  density_to_color関数が、人口密度の数値を視覚的な色情報に変換します。この変換では
  以下の原則に従っています：
  - 最小密度（50人/km²）は白色に近い色で表現
  - 最大密度（1000人/km²）は濃い青で表現
  - その間の密度は線形的に青の濃淡が変化

  この色の選択には、以下のような考慮が含まれています：
  - 青系の色は定量的なデータの表現に適している
  - 白から青への変化は直感的に「密度の増加」を表現できる
  - グラデーションの変化が人間の目で識別しやすい

3. 描画フェーズ：
  japanmapライブラリを使用して、色分けされた日本地図を生成します。10x10インチの
  サイズで描画することで、十分な詳細度と視認性を確保しています。

技術的な実装の詳細：
- 人口密度の値域：50～1000人/km²
- 色の生成：RGB値を使用し、青成分を固定（255）しながら赤と緑の成分を
 255から0まで線形的に変化させる
- 図のサイズ：10x10インチ（高解像度での表示に適している）

必要なライブラリ：
- japanmap: 日本地図の描画基盤
- japanize_matplotlib: 日本語フォントのサポート
- matplotlib.pyplot: 描画機能の提供
- random: 架空データの生成

出力：
人口密度に応じて青の濃淡で色分けされた日本地図が表示されます。濃い青の
地域ほど人口密度が高いことを示しています。

カスタマイズのポイント：
1. density_to_color関数の修正により、異なる色スキームの実装が可能
2. 人口密度の範囲（50-1000）の調整が可能
3. random.seed()の値を変更することで、異なるパターンのデータを生成可能

使用例と応用：
このプログラムは以下のような用途に活用できます：
- 人口統計データの視覚化の学習教材
- 地理情報システム（GIS）の基本概念の説明
- データビジュアライゼーションの手法の実践例

注意事項：
- このプログラムは架空のデータを使用しています。実際の人口密度とは異なります。
- 色の濃淡の識別は、ディスプレイの設定や環境光によって影響を受ける可能性があります。
"""
import japanmap as jm
# noinspection PyUnresolvedReferences
import japanize_matplotlib
import matplotlib.pyplot as plt
import random

# 各都道府県の架空の人口密度データを作成
random.seed(42)
population_density = {i + 1: random.randint(50, 1000) for i in range(47)}

# 色分けデータを作成（人口密度に応じて色を設定）
def density_to_color(density):
    # 人口密度を濃淡に変換 (50~1000 → 白～青)
    max_density = 1000
    intensity = int(255 * (density / max_density))  # 0~255に変換
    return f"rgb({255 - intensity}, {255 - intensity}, 255)"  # 青系

cmap = {pref: density_to_color(density) for pref, density in population_density.items()}

# 地図を描画
plt.figure(figsize=(10, 10))
plt.imshow(jm.picture(cmap))
plt.axis('off')
plt.title("都道府県別人口密度 (架空データ)", fontsize=16)
plt.tight_layout()
plt.show()
